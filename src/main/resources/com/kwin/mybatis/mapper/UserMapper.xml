<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org/DTD Config 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kwin.mybatis.mapper.UserMapper">
<!--	<resultMap id="BaseResultMap" type="User">-->
		<!-- property 映射到entity中，在实际匹配中会全部转换为大写比对-->
<!--		<id column="id" property="id"/>-->
<!--		<result column="user_name" property="userName"/>-->
<!--		<result column="user_password" property="userPassword"/>-->
<!--		<result column="user_email" property="userEmail"/>-->
<!--		<result column="user_info" property="userInfo"/>-->
<!--		<result column="head_img" property="headImg" jdbcType="BLOB"/>-->
<!--		<result column="create_time" property="createTime"/>-->
<!--	</resultMap>-->
	<sql id="BaseColumns">
		id, user_name, user_password, user_email, user_info, head_img, create_time
	</sql>
	
	<select id="selectById" parameterType="Long" resultType="User">
		select
			<include refid="BaseColumns"/>
		from
			sys_user
		where
			id = #{id}
	</select>
	
	<select id="selectAll" resultType="User">
		select
			id, 
			user_name, 
			user_password, 
			user_email, 
			user_info, 
			head_img, 
			create_time
		from
			sys_user;
	</select>
	
	<select id="selectRolesByUserId" parameterType="java.lang.Long" resultType="Role">
		select
			r.id, 
			r.role_name, 
			r.enabled, 
			r.create_by, 
			r.create_time,
			u.user_name as "user.user_name",
			u.user_email as "user.user_email"
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
		where u.id = #{userId}
	</select>
	
	<insert id="insert" parameterType="User">
		insert into sys_user(
			user_name, user_password, user_email, user_info, head_img, create_time
		) values(
			#{userName}, #{userPassword}, #{userEmail},
			#{userInfo}, #{headImg, jdbcType=BLOB},
			#{createTime, jdbcType=TIMESTAMP}
		)
	</insert>
	
	<!-- 使用JDBC的 getGeneratedKeys 方法获得数据库内生成的主键， 然后赋值给 keyProperty 配置的 id 属性-->
	<insert id="insert2" parameterType="User" useGeneratedKeys="true" keyProperty="id">
		insert into sys_user(
			user_name, user_password, user_email, user_info, head_img, create_time
		) values(
			#{userName}, #{userPassword}, #{userEmail},
			#{userInfo}, #{headImg, jdbcType=BLOB},
			#{createTime, jdbcType=TIMESTAMP}
		)
	</insert>
		
	<insert id="insert3" parameterType="User">
		insert into sys_user(
			user_name, user_password, user_email, user_info, head_img, create_time
		) values(
			#{userName}, #{userPassword}, #{userEmail},
			#{userInfo}, #{headImg, jdbcType=BLOB},
			#{createTime, jdbcType=TIMESTAMP}
		)
		<!-- 
			keyColumn 从数据库获取 映射到 keyProperty
			order 属性设置和使用的数据库相关， 在 mysql 中 order 属性设置为 AFTER 因为当前记录的主键值在 insert 语句执行成功后才能获取到
			而在 oracle 数据库中需要先从序列获取值，然后将值作为主键插入到数据库中  值为 BEFORE
		-->
		<selectKey keyColumn="id" resultType="java.lang.Long" keyProperty="id" order="AFTER">
			<!-- MySQL 写法-->
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
	
	<update id="updateById" parameterType="User">
		update sys_user
		set 
			user_name = #{userName},
			user_password = #{userPassword},
			user_email = #{userEmail},
			user_info = #{userInfo},
			head_img = #{headImg, jdbcType=BLOB},
			create_time = #{createTime, jdbcType=TIMESTAMP}
		where id = #{id}	
	</update>
	
	<delete id="deleteById" parameterType="java.lang.Long">
		delete from sys_user where id = #{id}
	</delete>
	
	<select id="selectRolesByUserIdAndRoleEnabled" resultType="Role">
		select
			r.id,
			r.role_name,
			r.enabled,
			r.create_by,
			r.create_time
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
		where u.id = #{userId} and r.enabled = #{enabled}
	</select>
</mapper>